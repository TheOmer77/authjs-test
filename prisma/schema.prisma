generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid()) @db.Uuid
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  twoFactorEnabled      Boolean                @default(false) @map("twofactor_enabled")
  twoFactorConfirmation TwoFactorConfirmation?

  name  String?
  image String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id    String @id @default(uuid()) @db.Uuid
  email String
  token String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")

  @@unique([email, token])
}

model PasswordResetToken {
  id    String @id @default(uuid()) @db.Uuid
  email String
  token String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")

  @@unique([email, token])
}

model TwoFactorToken {
  id    String @id @default(uuid()) @db.Uuid
  email String
  token String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([user_id])
}
